% Dictator game
% modeling

function result = nmodel_11_ratio(bootData)    
% random starts for parameters%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
rho = rand(1);
% sigma = -rand(1);
lambda = rand(1);
inx0 = [rho lambda];
try
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
lb = [-10, 0];
ub = [10,10];
[b, fval] = fmincon(@DG_m2,inx0,[],[],[],[],lb ,ub ,[], optimset('Algorithm', 'interior-point'),bootData);
[loglike, prob_chosen] = DG_m2(b, bootData);

params = b;
modelLL = -loglike;      %loglikelihood here should be negative for model
nullLL = log(0.5)*length(bootData'); %null model
pseudoR2 = 1 -  nullLL/ modelLL; %0 to 1 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Eqoall=bootData(:,3)./(bootData(:,4)+bootData(:,5)).*bootData(:,4); % the money to other qhwn self=other
bic = 2*loglike + 2*log(length(bootData'));

result.thisloglike = loglike;    
catch           % returns the last error message generated by MATLAB
lasterr
end;
result.params = b;
result.pseudoR2 = pseudoR2;
result.loglike = loglike;
result.bic = bic;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [loglike, prob_chosen] = DG_m2(q0,bootData)
rho = q0(1);
lambda = q0(2);

for t=1:size(bootData,1)
To = 0:bootData(t,3); 	% possible choices for other [bootData(t,3) total raw money] 
Ts = bootData(t,3) - To; % token to other 
Wo=bootData(t,5)/bootData(t,4); % ratio for other/ self
Ms = Ts * bootData(t,4);	% possible payoff for self

U =rho*Wo*(To./(Ts+To));

% U =Ms +rho*Wo*(To/(Ts+To));

% U =Ms-rho*Wo*abs(Ts-Wo*To);
% U =Ms -abs(Ts-To*Wo*rho)*sigma;
% U =Ms - ((Ms>=Mo)*rho) .* (Ms-Mo) - ((Ms<Mo)*sigma) .* (Mo-Ms);
%  U = ((Ms>=Mo)*rho + (Ms<Mo)*sigma) .* Mo +  (1 - (Ms>=Mo)*rho - (Ms<Mo)*sigma) .* Ms;
prob = exp(lambda * U) / nansum(exp(lambda * U));
prob_chosen(t,1) = prob(bootData(t,6)+1);
end
loglike = -nansum(log(prob_chosen));
end

